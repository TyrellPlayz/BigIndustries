buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'net.minecraftforge.gradle'

version = "${project.mod_version}"
group = 'com.tyrellplayz.big_industries'
archivesBaseName = "big_industries-${project.minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "${project.minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'big_industries'
            mods {
                big_industries {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.enabledGameTestNamespaces', 'big_industries'
            mods {
                big_industries {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'big_industries'
            mods {
                big_industries {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', 'big_industries', '--server', '--client', '--dev', '--reports', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            //args '--mod', 'big_industries', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                big_industries {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    // compile against the JEI API but do not include it at runtime
    //compileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}:${project.jei_version}:api")
    // at runtime, use the full JEI jar
    //runtimeOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}:${project.jei_version}")

    implementation fg.deobf("com.tyrellplayz.zlib:zlib-1.19.2:1.0.3")
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen {false}
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'mod_version': mod_version, 'minecraft_version_range': minecraft_version_range, 'forge_version_range': forge_version_range, "loader_version_range": loader_version_range, "zlib_version": zlib_version
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

jar {
    from sourceSets.main.output
    manifest {
        attributes([
                "Specification-Title"     : "big_industries",
                "Specification-Vendor"    : "TyrellPlayz",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "TyrellPlayz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

curseforge {
    apiKey = project.findProperty('curseforge_apikey') ?: '0'
    project {
        id = curse_project_id
        changelog = file('changelog.html')
        changelogType = 'html'
        releaseType = 'beta'
        addGameVersion "${minecraft_version}"
        relations {
            requiredDependency 'zlib'
            optionalDependency 'jei'
        }
    }
}
